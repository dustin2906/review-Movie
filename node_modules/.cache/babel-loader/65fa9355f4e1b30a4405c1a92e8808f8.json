{"ast":null,"code":"var _jsxFileName = \"E:\\\\LearningCoding\\\\LearningReact\\\\reactMovie\\\\src\\\\components\\\\Movie\\\\Movie.js\";\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        console.log(result);\n\n        if (result.status.code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            //... then fetch actors in the setState callback function\n            const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              });\n            });\n          });\n        }\n      }).catch(error => console.error('Error:', error));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    }); // First fetch the movie...\n\n    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n    this.fetchItems(endpoint);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, this.state.movie ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Navigation, {\n      movie: this.props.location.movieName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(MovieInfoBar, {\n      time: this.state.movie.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    })) : null, this.state.actors ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FourColGrid, {\n      header: 'Actors',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, this.state.actors.map((element, i) => {\n      return /*#__PURE__*/React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 22\n        }\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 58\n      }\n    }, \" No Movie \") : null, this.state.loading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 35\n      }\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["E:/LearningCoding/LearningReact/reactMovie/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","console","log","status","code","setState","props","match","params","movieId","crew","filter","member","job","cast","catch","error","componentDidMount","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { API_URL, API_KEY} from '../../config';\r\nimport Navigation from '../elements/Navigation/Navigation';\r\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\r\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\r\nimport FourColGrid from '../elements/Actor/Actor';\r\nimport Spinner from '../elements/Spinner/Spinner';\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component {\r\n  state = {\r\n    movie: null,\r\n    actors: null,\r\n    directors: [],\r\n    loading: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ loading: true})\r\n    // First fetch the movie...\r\n    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`\r\n    this.fetchItems(endpoint);\r\n  }\r\n\r\n  fetchItems = (endpoint) => {\r\n    fetch(endpoint) \r\n    .then(result => result.json())\r\n    .then(result => {\r\n      console.log(result)\r\n      if(result.status.code) {\r\n        this.setState({ loading: false});\r\n      } else {\r\n        this.setState({ movie: result}, () => {\r\n          //... then fetch actors in the setState callback function\r\n          const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`\r\n          fetch(endpoint)\r\n          .then(result => result.json())\r\n          .then(result => {\r\n            const directors = result.crew.filter( (member) => member.job === \"Director\");\r\n\r\n            this.setState({\r\n              actors: result.cast,\r\n              directors,\r\n              loading: false\r\n            })\r\n          })\r\n        })\r\n      }\r\n    })\r\n    .catch(error => console.error('Error:', error))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"rmdb-movie\">\r\n        {this.state.movie ? \r\n          <div>\r\n            <Navigation movie={this.props.location.movieName} />\r\n            <MovieInfo movie={this.state.movie} directors={this.state.directors}/>\r\n            <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />   \r\n          </div>\r\n        : null }\r\n\r\n        {this.state.actors ?\r\n          <div className=\"rmdb-movie-grid\">\r\n            <FourColGrid header={'Actors'}> \r\n            {this.state.actors.map( (element, i) => {\r\n              return <Actor key={i} actor={element} />\r\n            })}\r\n            </FourColGrid>\r\n          </div>\r\n            : null }\r\n            {!this.state.actors && !this.state.loading ? <h1> No Movie </h1> : null}\r\n            {this.state.loading ? <Spinner /> :null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Movie;"]},"metadata":{},"sourceType":"module"}